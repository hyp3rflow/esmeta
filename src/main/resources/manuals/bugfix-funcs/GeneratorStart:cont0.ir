def <CONT>:GeneratorStart:cont0(): Unknown {
  %0 = generatorBody
  if (? %0: Ast) {
    sdo-call %1 = generatorBody->Evaluation()
    let result = %1
  } else {
    assert (? generatorBody: AbstractClosure)
    call %2 = generatorBody()
    let result = %2
  }
  assert (yet "[YET] If we return here, the generator either threw an exception or performed either an implicit or explicit return.")
  (pop < @EXECUTION_STACK)
  generator.GeneratorState = ~completed~
  nop
  if (= result.Type ~normal~) {
    let resultValue = undefined
  } else {
    if (= result.Type ~return~) {
      let resultValue = result.Value
    } else {
      assert (= result.Type ~throw~)
      call %3 = (pop < genContext.ReturnCont)(result) // BUG
    }
  }
  call %4 = clo<CreateIterResultObject>(resultValue, true)
  call %5 = (pop < genContext.ReturnCont)(comp[~normal~/~empty~](%4)) // BUG
}
