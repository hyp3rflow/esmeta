def <SYNTAX>:CallExpression[0,0].Evaluation(this: Unknown): Unknown {
  let expr = (parse this[0] (nt |CallMemberExpression|[]))
  let memberExpr = expr.MemberExpression
  let arguments = expr.Arguments
  sdo-call %0 = memberExpr->Evaluation()
  let ref = [? %0] // BUG (fixed in #2744)
  call %1 = clo<GetValue>(ref)
  let func = [? %1]
  %3 = ref
  %2 = (? %3: ReferenceRecord)
  if %2 {
    call %4 = clo<IsPropertyReference>(ref)
    %2 = (= %4 false)
    if %2 {
      %2 = (= ref.ReferencedName "eval")
    } else {}
  } else {}
  if %2 {
    call %5 = clo<SameValue>(func, @EXECUTION_STACK[0].Realm.Intrinsics["%eval%"])
    if (= %5 true) {
      sdo-call %6 = arguments->ArgumentListEvaluation()
      let argList = [? %6]
      if (= argList.length 0) {
        return undefined
      } else {}
      let evalArg = argList[0]
      if true {
        let strictCaller = true
      } else {
        let strictCaller = false
      }
      let evalRealm = @EXECUTION_STACK[0].Realm
      call %7 = clo<PerformEval>(evalArg, evalRealm, strictCaller, true)
      return [? %7]
    } else {}
  } else {}
  let thisCall = this
  call %8 = clo<IsInTailPosition>(thisCall)
  let tailCall = %8
  call %9 = clo<EvaluateCall>(func, ref, arguments, tailCall)
  return [? %9]
}
