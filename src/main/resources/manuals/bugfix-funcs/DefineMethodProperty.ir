def DefineMethodProperty(
  homeObject: Object,
  key: PropertyKeyOrPrivateName,
  closure: FunctionObject,
  enumerable: Boolean
): Unknown {
  assert (&& (? homeObject: OrdinaryObject) homeObject.Extensible)
  %0 = key
  if (? %0: PrivateName) {
    return (new PrivateElement("Key" -> key, "Kind" -> ~method~, "Value" -> closure))
  } else {
    let desc = (new PropertyDescriptor("Value" -> closure, "Writable" -> true, "Enumerable" -> enumerable, "Configurable" -> true))
    call %1 = clo<DefinePropertyOrThrow>(homeObject, key, desc)
    [? %1] // BUG (REPORTED in #2814)
    return ~unused~
  }
}
